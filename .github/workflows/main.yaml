  name: Build Test push deploy configure
  #  [push, pull_request]
  on:
     push:
      branches:
        - DVOP_0030_Abdullah_deployment
     pull_request:
      branches:
        - DVOP_0030_Abdullah_deployment
    
  env:
    IMAGE_NAME:  user_service
    IMAGE_NAME2: order_service
    IMAGE_NAME3: email_service
    REPO_NAME: abood1
    
  jobs:
  # test:
    
    build:
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3
      - name: Build user_service image
        run: docker build . -t ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }} -f user-Dockerfile
        
      - name: run userService container
        id: run-userService
        working-directory: .
        run: |
            docker run -d -e 8080:8080 -host=172.17.0.2 $REPO_NAME/$IMAGE_NAME && \
            docker ps && sleep 5
    

      - name: Output running userService summary to console
        working-directory: .
        run: echo ${{ steps.run-userService.outputs.summary }}

      - name: Build orderService image 
        run: docker build . -t ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME2 }} -f order-Dockerfile

      - name: run orderService container
        id: run-orderServiece
        working-directory: .
        run: |
            docker run -d -e 8080:8080 -host=172.17.0.2 $REPO_NAME/$IMAGE_NAME2 && \
            docker ps && sleep 5
    

      - name: Output running orderService summary to console
        working-directory: .
        run: echo ${{ steps.run-orderService.outputs.summary }}

      - name: Build email_service image 
        run:  docker build . -t ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME3 }} -f email-Dockerfile

      - name: run emailService container
        id: run-emailServiece
        working-directory: .
        run: |
            docker run -d -e 8080:8080 -host=172.17.0.2 $REPO_NAME/$IMAGE_NAME3 && \
            docker ps && sleep 5
    

      - name: Output running emailService summary to console
        working-directory: .
        run: echo ${{ steps.run-emailService.outputs.summary }}

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push userServie to docker hub 
        run: docker push $REPO_NAME/$IMAGE_NAME

      - name: push order_service image to docker hub
        run:  docker push $REPO_NAME/$IMAGE_NAME2

      - name: push email_service image to docker hub
        run:  docker push $REPO_NAME/$IMAGE_NAME3
     
    provision:
       needs: build
       runs-on: ubuntu-latest
       defaults:
        run:
          working-directory: ./terraform
       env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

       steps:
        - name: Checkout
          uses: actions/checkout@v3

        # not needed anymore, as this is done through ansible in the configure job
        # - name: Setup java to compile the gateway
        #   uses: actions/setup-java@v1
        #   with:
        #    java-version: 17   
        # - run: mvn clean package
        #   working-directory: ./gateway

        # Install the preferred version of Terraform CLI 
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.3.7
          # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: terraform init 

        - name: Terraform Apply
          # continue-on-error: true
          id: apply
          env:
            TF_VAR_userService_db_password: ${{secrets.TF_VAR_userService_db_password}}
            TF_VAR_orderService_db_password: ${{secrets.TF_VAR_orderService_db_password}}
            # TF_VAR_SSH_key: ${{ secrets.SSH_PRIVATE_KEY }}
          # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve -lock=false  -input=false
         
        # - name: destroy null resource
        #   run: terraform destroy -auto-approve -lock=false -target null_resource.update_inventory
        # - name: apply null resource
        #   run: terraform apply -auto-approve -lock=false -target null_resource.update_inventory


        # - name: delete if apply fails
        #   if: steps.apply.outcome == 'failure'
        #   run: terraform destroy

    configure: 
        needs: provision
        runs-on: ubuntu-latest
        defaults:
         run:
          working-directory: ./ansible
        steps:
          - name: Checkout
            uses: actions/checkout@v3

          - name: Run playbook playbook.yml
            uses: dawidd6/action-ansible-playbook@v2
            with:
                # Required, playbook filepath
                playbook: playbook.yml
                # Optional, directory where playbooks live
                directory: ./ansible
                # Optional, SSH private key
                key: ${{secrets.SSH_PRIVATE_KEY}}
                # Optional, additional flags to pass to ansible-playbook
                options: |
                  --inventory hosts.ini
                  
          - name: compile gateway
            uses: actions/setup-java@v1
            with:
             java-version: 17   
          - run: mvn clean package
            working-directory: ./gateway

          - name: Run playbook book2.yml
            uses: dawidd6/action-ansible-playbook@v2
            with:
              # Required, playbook filepath
              playbook: ./ansible/book2.yml
              #Optional, directory where playbooks live
              # directory: ./
              # Optional, SSH private key
              key: ${{secrets.SSH_PRIVATE_KEY}}
              # Optional, additional flags to pass to ansible-playbook
              options: |
                --inventory ./ansible/hosts.ini

          
           

   